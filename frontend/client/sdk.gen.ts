// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { PostBillingWebhookData, PingData, PingResponse, PingAuthData, PingAuthResponse, PingAuthError, PingAdminData, PingAdminResponse, PingAdminError, AuthenticateUserAndGetSessionData, AuthenticateUserAndGetSessionResponse, AuthenticateUserAndGetSessionError, CreateUserAccountAndWorkspaceData, CreateUserAccountAndWorkspaceResponse, CreateUserAccountAndWorkspaceError, GetUserDetailsWithOrganizationsData, GetUserDetailsWithOrganizationsResponse, GetUserDetailsWithOrganizationsError, ListFolderContentsAndProjectsData, ListFolderContentsAndProjectsResponse, ListFolderContentsAndProjectsError, ListAllFoldersInOrganizationData, ListAllFoldersInOrganizationResponse, ListAllFoldersInOrganizationError, ListAllProjectsInOrganizationData, ListAllProjectsInOrganizationResponse, ListAllProjectsInOrganizationError, GetFolderHierarchyPathData, GetFolderHierarchyPathResponse, GetFolderHierarchyPathError, CreateFolderWithHierarchyData, CreateFolderWithHierarchyResponse, CreateFolderWithHierarchyError, DeleteFolderByOwnerOrAdminData, DeleteFolderByOwnerOrAdminResponse, DeleteFolderByOwnerOrAdminError, CreateProjectWithConversationData, CreateProjectWithConversationResponse, CreateProjectWithConversationError, DeleteProjectAndAssociatedDataData, DeleteProjectAndAssociatedDataResponse, DeleteProjectAndAssociatedDataError, GetProjectWithFolderInfoData, GetProjectWithFolderInfoResponse, GetProjectWithFolderInfoError, UpdateProjectAttributesData, UpdateProjectAttributesResponse, UpdateProjectAttributesError, ListProjectsInOrganizationData, ListProjectsInOrganizationResponse, ListProjectsInOrganizationError, GetProjectScadData, GetProjectScadResponse, GetProjectScadError, UpdateProjectScadData, UpdateProjectScadResponse, UpdateProjectScadError, GetProjectCodeData, GetProjectCodeResponse, GetProjectCodeError, UpdateProjectCodeData, UpdateProjectCodeResponse, UpdateProjectCodeError, DeleteProjectCodeData, DeleteProjectCodeResponse, DeleteProjectCodeError, GetAdminUsersData, GetAdminUsersError, PutAdminUsersByUserIdRoleData, PutAdminUsersByUserIdRoleError, DeleteAdminUsersByUserIdData, DeleteAdminUsersByUserIdError, GenerateObjectsData, GenerateObjectsResponse, GenerateObjectsError, GetChatHistoryData, GetChatHistoryResponse, GetChatHistoryError, CreateCheckoutSessionData, CreateCheckoutSessionError, CreatePortalSessionData, CreatePortalSessionError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
};

export const postBillingWebhook = <ThrowOnError extends boolean = false>(options?: Options<PostBillingWebhookData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/billing/webhook',
        ...options
    });
};

/**
 * Basic health check
 * Returns a simple pong response to verify the API is running
 */
export const ping = <ThrowOnError extends boolean = false>(options?: Options<PingData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PingResponse, unknown, ThrowOnError>({
        url: '/ping/',
        ...options
    });
};

/**
 * Authentication check
 * Verifies that the authentication token is valid and returns user information
 */
export const pingAuth = <ThrowOnError extends boolean = false>(options?: Options<PingAuthData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PingAuthResponse, PingAuthError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/ping/auth',
        ...options
    });
};

/**
 * Admin access check
 * Verifies that the user has admin privileges
 */
export const pingAdmin = <ThrowOnError extends boolean = false>(options?: Options<PingAdminData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PingAdminResponse, PingAdminError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/ping/admin',
        ...options
    });
};

/**
 * User login
 * Authenticates user credentials, updates last login time, and returns JWT token with user information including organizations
 */
export const authenticateUserAndGetSession = <ThrowOnError extends boolean = false>(options: Options<AuthenticateUserAndGetSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthenticateUserAndGetSessionResponse, AuthenticateUserAndGetSessionError, ThrowOnError>({
        url: '/users/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Register new user
 * Creates a new user account with secure password hashing and initializes their default organization workspace
 */
export const createUserAccountAndWorkspace = <ThrowOnError extends boolean = false>(options: Options<CreateUserAccountAndWorkspaceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateUserAccountAndWorkspaceResponse, CreateUserAccountAndWorkspaceError, ThrowOnError>({
        url: '/users/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get user details
 * Retrieves authenticated user details including organizations and roles
 */
export const getUserDetailsWithOrganizations = <ThrowOnError extends boolean = false>(options?: Options<GetUserDetailsWithOrganizationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserDetailsWithOrganizationsResponse, GetUserDetailsWithOrganizationsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/me/',
        ...options
    });
};

/**
 * Get folder contents
 * Retrieves all subfolders and projects within a specified folder
 */
export const listFolderContentsAndProjects = <ThrowOnError extends boolean = false>(options: Options<ListFolderContentsAndProjectsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListFolderContentsAndProjectsResponse, ListFolderContentsAndProjectsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/folders/{folderId}/contents',
        ...options
    });
};

/**
 * Get all folders in organization
 * Retrieves all folders in an organization, ordered by folder path
 */
export const listAllFoldersInOrganization = <ThrowOnError extends boolean = false>(options: Options<ListAllFoldersInOrganizationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListAllFoldersInOrganizationResponse, ListAllFoldersInOrganizationError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/folders/org/{organizationId}',
        ...options
    });
};

/**
 * Get all projects in organization
 * Retrieves all projects in an organization, ordered by folder path and project name
 */
export const listAllProjectsInOrganization = <ThrowOnError extends boolean = false>(options: Options<ListAllProjectsInOrganizationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListAllProjectsInOrganizationResponse, ListAllProjectsInOrganizationError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/folders/projects/org/{organizationId}',
        ...options
    });
};

/**
 * Get folder hierarchy
 * Retrieves the complete folder hierarchy path from root to the specified folder
 */
export const getFolderHierarchyPath = <ThrowOnError extends boolean = false>(options: Options<GetFolderHierarchyPathData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFolderHierarchyPathResponse, GetFolderHierarchyPathError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/folders/{folderId}/hierarchy',
        ...options
    });
};

/**
 * Create new folder
 * Creates a new folder in an organization with optional parent folder, maintaining folder hierarchy and path
 */
export const createFolderWithHierarchy = <ThrowOnError extends boolean = false>(options: Options<CreateFolderWithHierarchyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateFolderWithHierarchyResponse, CreateFolderWithHierarchyError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/folders/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete folder
 * Deletes a folder if the authenticated user has owner or admin role in the organization
 */
export const deleteFolderByOwnerOrAdmin = <ThrowOnError extends boolean = false>(options: Options<DeleteFolderByOwnerOrAdminData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteFolderByOwnerOrAdminResponse, DeleteFolderByOwnerOrAdminError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/folders/{folderId}',
        ...options
    });
};

/**
 * Create new project
 * Creates a new project in an organization with an optional folder, and initializes a default conversation.
 */
export const createProjectWithConversation = <ThrowOnError extends boolean = false>(options: Options<CreateProjectWithConversationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateProjectWithConversationResponse, CreateProjectWithConversationError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/projects/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete project
 * Deletes a project and all its associated data (conversations, messages) in a transaction
 */
export const deleteProjectAndAssociatedData = <ThrowOnError extends boolean = false>(options: Options<DeleteProjectAndAssociatedDataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProjectAndAssociatedDataResponse, DeleteProjectAndAssociatedDataError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/projects/{projectId}',
        ...options
    });
};

/**
 * Get project details
 * Retrieves detailed project information including folder path and creator details
 */
export const getProjectWithFolderInfo = <ThrowOnError extends boolean = false>(options: Options<GetProjectWithFolderInfoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProjectWithFolderInfoResponse, GetProjectWithFolderInfoError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/projects/{projectId}',
        ...options
    });
};

/**
 * Update project details
 * Updates project information including name, description, icon, folder location, and training status
 */
export const updateProjectAttributes = <ThrowOnError extends boolean = false>(options: Options<UpdateProjectAttributesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateProjectAttributesResponse, UpdateProjectAttributesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/projects/{projectId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List organization projects
 * Retrieves all projects in an organization with their folder information, ordered by folder path and name
 */
export const listProjectsInOrganization = <ThrowOnError extends boolean = false>(options: Options<ListProjectsInOrganizationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListProjectsInOrganizationResponse, ListProjectsInOrganizationError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/projects/org/{organizationId}',
        ...options
    });
};

/**
 * Get latest SCAD object for a project
 * Get the latest SCAD object for a project. If no objects exist, return an empty string.
 */
export const getProjectScad = <ThrowOnError extends boolean = false>(options: Options<GetProjectScadData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProjectScadResponse, GetProjectScadError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/projects/{projectId}/scad',
        ...options
    });
};

/**
 * Update SCAD object for a project
 * Update the SCAD object for a project. Creates a new object if none exists.
 */
export const updateProjectScad = <ThrowOnError extends boolean = false>(options: Options<UpdateProjectScadData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateProjectScadResponse, UpdateProjectScadError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/projects/{projectId}/scad',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get all code objects for a project
 * Retrieve all JavaScript objects associated with a project. If no objects exist, return an empty array.
 */
export const getProjectCode = <ThrowOnError extends boolean = false>(options: Options<GetProjectCodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProjectCodeResponse, GetProjectCodeError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/projects/{projectId}/code',
        ...options
    });
};

/**
 * Update code object for a project
 * Update a JavaScript code object for a project. Creates a new object if id is not provided.
 */
export const updateProjectCode = <ThrowOnError extends boolean = false>(options: Options<UpdateProjectCodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateProjectCodeResponse, UpdateProjectCodeError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/projects/{projectId}/code',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete code object for a project
 * Deletes a JavaScript code object from a project. Requires project access permissions.
 */
export const deleteProjectCode = <ThrowOnError extends boolean = false>(options: Options<DeleteProjectCodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProjectCodeResponse, DeleteProjectCodeError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/projects/code/{objectId}',
        ...options
    });
};

export const getAdminUsers = <ThrowOnError extends boolean = false>(options?: Options<GetAdminUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, GetAdminUsersError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/admin/users/',
        ...options
    });
};

export const putAdminUsersByUserIdRole = <ThrowOnError extends boolean = false>(options: Options<PutAdminUsersByUserIdRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, PutAdminUsersByUserIdRoleError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/admin/users/{userId}/role',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteAdminUsersByUserId = <ThrowOnError extends boolean = false>(options: Options<DeleteAdminUsersByUserIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, DeleteAdminUsersByUserIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/admin/users/{userId}',
        ...options
    });
};

/**
 * Generate 3D objects based on natural language instructions
 * Uses LLM-based AI models to generate 3D objects and scene state based on text instructions
 */
export const generateObjects = <ThrowOnError extends boolean = false>(options: Options<GenerateObjectsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GenerateObjectsResponse, GenerateObjectsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/chat/llm/{projectId}/generate-objects',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get chat history for a project
 * Returns the conversation history including messages and generated objects
 */
export const getChatHistory = <ThrowOnError extends boolean = false>(options: Options<GetChatHistoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetChatHistoryResponse, GetChatHistoryError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/chat/history/{projectId}/history',
        ...options
    });
};

/**
 * Create Stripe Checkout session
 * Creates a new Stripe Checkout session for subscription
 */
export const createCheckoutSession = <ThrowOnError extends boolean = false>(options?: Options<CreateCheckoutSessionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, CreateCheckoutSessionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/billing/create-checkout-session/',
        ...options
    });
};

/**
 * Create Stripe Customer Portal session
 * Creates a new Stripe Customer Portal session for managing subscription
 */
export const createPortalSession = <ThrowOnError extends boolean = false>(options?: Options<CreatePortalSessionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, CreatePortalSessionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/billing/create-portal-session/',
        ...options
    });
};