// This file is auto-generated by @hey-api/openapi-ts

export type _Error = {
    type?: string;
    properties?: {
        error?: {
            type?: string;
        };
    };
};

export type AuthenticatedRequest = {
    type?: string;
    properties?: {
        headers?: {
            type?: string;
            properties?: {
                Authorization?: {
                    type?: string;
                    description?: string;
                    example?: string;
                };
            };
        };
    };
};

export type PostBillingWebhookData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/billing/webhook';
};

export type PostBillingWebhookResponses = {
    default: unknown;
};

export type PingData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/ping/';
};

export type PingResponses = {
    /**
     * API is running
     */
    200: {
        message?: string;
    };
};

export type PingResponse = PingResponses[keyof PingResponses];

export type PingAuthData = {
    body?: never;
    headers?: {
        authorization?: string;
    };
    path?: never;
    query?: never;
    url: '/ping/auth';
};

export type PingAuthErrors = {
    /**
     * Unauthorized - Missing or invalid token
     */
    401: _Error;
    /**
     * Server error - JWT_SECRET not configured
     */
    500: _Error;
};

export type PingAuthError = PingAuthErrors[keyof PingAuthErrors];

export type PingAuthResponses = {
    /**
     * Token is valid
     */
    200: {
        message?: string;
        user?: {
            userId?: string;
            email?: string;
            isAdmin?: boolean;
        };
    };
};

export type PingAuthResponse = PingAuthResponses[keyof PingAuthResponses];

export type PingAdminData = {
    body?: never;
    headers?: {
        authorization?: string;
    };
    path?: never;
    query?: never;
    url: '/ping/admin';
};

export type PingAdminErrors = {
    /**
     * Unauthorized - Missing or invalid token
     */
    401: _Error;
    /**
     * Forbidden - User is not an admin
     */
    403: _Error;
    /**
     * Server error - JWT_SECRET not configured
     */
    500: _Error;
};

export type PingAdminError = PingAdminErrors[keyof PingAdminErrors];

export type PingAdminResponses = {
    /**
     * User has admin access
     */
    200: {
        message?: string;
        user?: {
            userId?: string;
            email?: string;
            isAdmin?: boolean;
        };
    };
};

export type PingAdminResponse = PingAdminResponses[keyof PingAdminResponses];

export type AuthenticateUserAndGetSessionData = {
    body: {
        email: string;
        password: string;
    };
    path?: never;
    query?: never;
    url: '/users/login';
};

export type AuthenticateUserAndGetSessionErrors = {
    /**
     * Invalid email format
     */
    400: {
        errors?: Array<{
            msg?: string;
            param?: string;
            location?: string;
        }>;
    };
    /**
     * Invalid credentials
     */
    401: {
        error?: string;
    };
    /**
     * Server error
     */
    500: {
        error?: string;
    };
};

export type AuthenticateUserAndGetSessionError = AuthenticateUserAndGetSessionErrors[keyof AuthenticateUserAndGetSessionErrors];

export type AuthenticateUserAndGetSessionResponses = {
    /**
     * Login successful
     */
    200: {
        /**
         * JWT token for authentication
         */
        token?: string;
        user?: {
            id?: string;
            email?: string;
            name?: string;
            organizations?: Array<{
                id?: string;
                name?: string;
                role?: 'owner' | 'admin' | 'member';
            }>;
        };
    };
};

export type AuthenticateUserAndGetSessionResponse = AuthenticateUserAndGetSessionResponses[keyof AuthenticateUserAndGetSessionResponses];

export type CreateUserAccountAndWorkspaceData = {
    body: {
        email: string;
        /**
         * Must be at least 8 characters long
         */
        password: string;
        /**
         * User's full name
         */
        name: string;
    };
    path?: never;
    query?: never;
    url: '/users/register';
};

export type CreateUserAccountAndWorkspaceErrors = {
    /**
     * Validation error - Invalid email, password too short, or missing name
     */
    400: {
        errors?: Array<{
            msg?: string;
            param?: string;
            location?: string;
        }>;
    };
    /**
     * Email already registered
     */
    409: {
        error?: string;
    };
    /**
     * Server error during registration
     */
    500: {
        error?: string;
    };
};

export type CreateUserAccountAndWorkspaceError = CreateUserAccountAndWorkspaceErrors[keyof CreateUserAccountAndWorkspaceErrors];

export type CreateUserAccountAndWorkspaceResponses = {
    /**
     * User registered successfully
     */
    201: {
        message?: string;
        /**
         * The ID of the newly created user
         */
        userId?: string;
    };
};

export type CreateUserAccountAndWorkspaceResponse = CreateUserAccountAndWorkspaceResponses[keyof CreateUserAccountAndWorkspaceResponses];

export type GetUserDetailsWithOrganizationsData = {
    body?: never;
    headers?: {
        authorization?: string;
    };
    path?: never;
    query?: never;
    url: '/users/me/';
};

export type GetUserDetailsWithOrganizationsErrors = {
    /**
     * Unauthorized - Invalid token
     */
    401: _Error;
    /**
     * Server error - JWT_SECRET not configured
     */
    500: _Error;
};

export type GetUserDetailsWithOrganizationsError = GetUserDetailsWithOrganizationsErrors[keyof GetUserDetailsWithOrganizationsErrors];

export type GetUserDetailsWithOrganizationsResponses = {
    /**
     * User details retrieved successfully
     */
    200: {
        id?: string;
        email?: string;
        name?: string;
        created_at?: string;
        updated_at?: string;
        last_login_at?: string | null;
        organizations?: Array<{
            id?: string;
            name?: string;
            role?: 'owner' | 'admin' | 'member';
        }>;
    };
};

export type GetUserDetailsWithOrganizationsResponse = GetUserDetailsWithOrganizationsResponses[keyof GetUserDetailsWithOrganizationsResponses];

export type ListFolderContentsAndProjectsData = {
    body?: never;
    headers?: {
        authorization?: string;
    };
    path: {
        /**
         * ID of the folder to get contents from
         */
        folderId: string;
    };
    query?: never;
    url: '/folders/{folderId}/contents';
};

export type ListFolderContentsAndProjectsErrors = {
    /**
     * Unauthorized - Missing or invalid token
     */
    401: _Error;
    /**
     * No access to organization
     */
    403: {
        error?: string;
    };
    /**
     * Folder not found
     */
    404: {
        error?: string;
    };
    /**
     * Server error
     */
    500: {
        error?: string;
    };
};

export type ListFolderContentsAndProjectsError = ListFolderContentsAndProjectsErrors[keyof ListFolderContentsAndProjectsErrors];

export type ListFolderContentsAndProjectsResponses = {
    /**
     * Folder contents retrieved successfully
     */
    200: {
        projects?: Array<{
            id?: string;
            name?: string;
            description?: string | null;
            icon?: string | null;
            folder_id?: string;
            created_at?: string;
            updated_at?: string;
        }>;
        subfolders?: Array<{
            id?: string;
            name?: string;
            path?: string;
            parent_folder_id?: string | null;
            created_at?: string;
            updated_at?: string;
        }>;
    };
};

export type ListFolderContentsAndProjectsResponse = ListFolderContentsAndProjectsResponses[keyof ListFolderContentsAndProjectsResponses];

export type ListAllFoldersInOrganizationData = {
    body?: never;
    headers?: {
        authorization?: string;
    };
    path: {
        /**
         * ID of the organization to list folders from
         */
        organizationId: string;
    };
    query?: never;
    url: '/folders/org/{organizationId}';
};

export type ListAllFoldersInOrganizationErrors = {
    /**
     * Unauthorized - Missing or invalid token
     */
    401: _Error;
    /**
     * No access to organization
     */
    403: {
        error?: string;
    };
    /**
     * Server error
     */
    500: {
        error?: string;
    };
};

export type ListAllFoldersInOrganizationError = ListAllFoldersInOrganizationErrors[keyof ListAllFoldersInOrganizationErrors];

export type ListAllFoldersInOrganizationResponses = {
    /**
     * Folders retrieved successfully
     */
    200: Array<{
        id?: string;
        name?: string;
        /**
         * Full path of the folder including parent folders
         */
        path?: string;
        parent_folder_id?: string | null;
        created_at?: string;
        updated_at?: string;
    }>;
};

export type ListAllFoldersInOrganizationResponse = ListAllFoldersInOrganizationResponses[keyof ListAllFoldersInOrganizationResponses];

export type ListAllProjectsInOrganizationData = {
    body?: never;
    headers?: {
        authorization?: string;
    };
    path: {
        /**
         * ID of the organization to list projects from
         */
        organizationId: string;
    };
    query?: never;
    url: '/folders/projects/org/{organizationId}';
};

export type ListAllProjectsInOrganizationErrors = {
    /**
     * Unauthorized - Missing or invalid token
     */
    401: _Error;
    /**
     * No access to organization
     */
    403: {
        error?: string;
    };
    /**
     * Server error
     */
    500: {
        error?: string;
    };
};

export type ListAllProjectsInOrganizationError = ListAllProjectsInOrganizationErrors[keyof ListAllProjectsInOrganizationErrors];

export type ListAllProjectsInOrganizationResponses = {
    /**
     * Projects retrieved successfully
     */
    200: Array<{
        id?: string;
        name?: string;
        description?: string | null;
        icon?: string | null;
        folder_id?: string | null;
        created_at?: string;
        updated_at?: string;
        /**
         * Name of the folder containing the project
         */
        folder_name?: string | null;
        /**
         * Full path of the folder containing the project
         */
        folder_path?: string | null;
    }>;
};

export type ListAllProjectsInOrganizationResponse = ListAllProjectsInOrganizationResponses[keyof ListAllProjectsInOrganizationResponses];

export type GetFolderHierarchyPathData = {
    body?: never;
    headers?: {
        authorization?: string;
    };
    path: {
        /**
         * ID of the folder to get hierarchy for
         */
        folderId: string;
    };
    query: {
        /**
         * ID of the organization the folder belongs to
         */
        organizationId: string;
    };
    url: '/folders/{folderId}/hierarchy';
};

export type GetFolderHierarchyPathErrors = {
    /**
     * Unauthorized - Missing or invalid token
     */
    401: _Error;
    /**
     * No access to organization
     */
    403: {
        error?: string;
    };
    /**
     * Folder not found
     */
    404: {
        error?: string;
    };
    /**
     * Server error
     */
    500: {
        error?: string;
    };
};

export type GetFolderHierarchyPathError = GetFolderHierarchyPathErrors[keyof GetFolderHierarchyPathErrors];

export type GetFolderHierarchyPathResponses = {
    /**
     * Array of folders from root to target folder
     */
    200: Array<{
        id?: string;
        name?: string;
        parent_folder_id?: string | null;
    }>;
};

export type GetFolderHierarchyPathResponse = GetFolderHierarchyPathResponses[keyof GetFolderHierarchyPathResponses];

export type CreateFolderWithHierarchyData = {
    body: {
        name: string;
        /**
         * ID of the organization to create the folder in
         */
        organizationId: string;
        /**
         * Optional parent folder ID for nesting (max depth: 4)
         */
        parentFolderId?: string | null;
    };
    headers?: {
        authorization?: string;
    };
    path?: never;
    query?: never;
    url: '/folders/';
};

export type CreateFolderWithHierarchyErrors = {
    /**
     * Validation error or maximum nesting depth exceeded
     */
    400: {
        errors?: Array<{
            msg?: string;
            param?: string;
            location?: string;
        }>;
    } | {
        error?: string;
    };
    /**
     * Unauthorized - Missing or invalid token
     */
    401: _Error;
    /**
     * No access to organization
     */
    403: {
        error?: string;
    };
    /**
     * Parent folder not found
     */
    404: {
        error?: string;
    };
    /**
     * Server error
     */
    500: {
        error?: string;
    };
};

export type CreateFolderWithHierarchyError = CreateFolderWithHierarchyErrors[keyof CreateFolderWithHierarchyErrors];

export type CreateFolderWithHierarchyResponses = {
    /**
     * Folder created successfully
     */
    201: {
        id?: string;
        name?: string;
        /**
         * Full path of the folder including parent folders
         */
        path?: string;
        parent_folder_id?: string | null;
        created_at?: string;
        updated_at?: string;
    };
};

export type CreateFolderWithHierarchyResponse = CreateFolderWithHierarchyResponses[keyof CreateFolderWithHierarchyResponses];

export type DeleteFolderByOwnerOrAdminData = {
    body?: never;
    headers?: {
        authorization?: string;
    };
    path: {
        /**
         * ID of the folder to delete
         */
        folderId: string;
    };
    query?: never;
    url: '/folders/{folderId}';
};

export type DeleteFolderByOwnerOrAdminErrors = {
    /**
     * Unauthorized - Missing or invalid token
     */
    401: _Error;
    /**
     * Forbidden - No access or insufficient role
     */
    403: {
        error?: string;
    } | {
        error?: string;
    };
    /**
     * Folder not found
     */
    404: {
        error?: string;
    };
    /**
     * Server error
     */
    500: {
        error?: string;
    };
};

export type DeleteFolderByOwnerOrAdminError = DeleteFolderByOwnerOrAdminErrors[keyof DeleteFolderByOwnerOrAdminErrors];

export type DeleteFolderByOwnerOrAdminResponses = {
    /**
     * Folder deleted successfully
     */
    200: {
        message?: string;
    };
};

export type DeleteFolderByOwnerOrAdminResponse = DeleteFolderByOwnerOrAdminResponses[keyof DeleteFolderByOwnerOrAdminResponses];

export type GetFileData = {
    body?: never;
    headers?: {
        authorization?: string;
    };
    path: {
        /**
         * The ID of the project
         */
        projectId: string;
    };
    query?: never;
    url: '/projects/{projectId}/code/file';
};

export type GetFileErrors = {
    /**
     * Unauthorized - Invalid token
     */
    401: _Error;
    /**
     * File not found
     */
    404: unknown;
    /**
     * Server error - JWT_SECRET not configured
     */
    500: _Error;
};

export type GetFileError = GetFileErrors[keyof GetFileErrors];

export type GetFileResponses = {
    /**
     * The JavaScript file content
     */
    200: string;
};

export type GetFileResponse = GetFileResponses[keyof GetFileResponses];

export type GetProjectIndexByWorkspaceAndProjectData = {
    body?: never;
    headers?: {
        authorization?: string;
    };
    path: {
        /**
         * The name of the workspace
         */
        workspaceName: string;
        projectName: string;
    };
    query?: never;
    url: '/projects/code/{workspaceName}/{projectName}/dev';
};

export type GetProjectIndexByWorkspaceAndProjectErrors = {
    /**
     * Unauthorized - Invalid token
     */
    401: _Error;
    /**
     * Workspace, project, or file not found
     */
    404: unknown;
    /**
     * Server error - JWT_SECRET not configured
     */
    500: _Error;
};

export type GetProjectIndexByWorkspaceAndProjectError = GetProjectIndexByWorkspaceAndProjectErrors[keyof GetProjectIndexByWorkspaceAndProjectErrors];

export type GetProjectIndexByWorkspaceAndProjectResponses = {
    /**
     * The JavaScript file content
     */
    200: string;
};

export type GetProjectIndexByWorkspaceAndProjectResponse = GetProjectIndexByWorkspaceAndProjectResponses[keyof GetProjectIndexByWorkspaceAndProjectResponses];

export type GetProjectFileByWorkspaceAndProjectData = {
    body?: never;
    headers?: {
        authorization?: string;
    };
    path: {
        /**
         * The name of the workspace
         */
        workspaceName: string;
        projectName: string;
        'filename@dev.js': string;
    };
    query?: never;
    url: '/projects/code/{workspaceName}/{projectName}/{filename@dev.js}';
};

export type GetProjectFileByWorkspaceAndProjectErrors = {
    /**
     * Unauthorized - Invalid token
     */
    401: _Error;
    /**
     * Workspace, project, or file not found
     */
    404: unknown;
    /**
     * Server error - JWT_SECRET not configured
     */
    500: _Error;
};

export type GetProjectFileByWorkspaceAndProjectError = GetProjectFileByWorkspaceAndProjectErrors[keyof GetProjectFileByWorkspaceAndProjectErrors];

export type GetProjectFileByWorkspaceAndProjectResponses = {
    /**
     * The JavaScript file content
     */
    200: string;
};

export type GetProjectFileByWorkspaceAndProjectResponse = GetProjectFileByWorkspaceAndProjectResponses[keyof GetProjectFileByWorkspaceAndProjectResponses];

export type GetDefaultProjectIndexByWorkspaceData = {
    body?: never;
    headers?: {
        authorization?: string;
    };
    path: {
        /**
         * The name of the workspace
         */
        workspaceName: string;
    };
    query?: never;
    url: '/projects/code/{workspaceName}/dev';
};

export type GetDefaultProjectIndexByWorkspaceErrors = {
    /**
     * Unauthorized - Invalid token
     */
    401: _Error;
    /**
     * Workspace, default project, or file not found
     */
    404: unknown;
    /**
     * Server error - JWT_SECRET not configured
     */
    500: _Error;
};

export type GetDefaultProjectIndexByWorkspaceError = GetDefaultProjectIndexByWorkspaceErrors[keyof GetDefaultProjectIndexByWorkspaceErrors];

export type GetDefaultProjectIndexByWorkspaceResponses = {
    /**
     * The JavaScript file content
     */
    200: string;
};

export type GetDefaultProjectIndexByWorkspaceResponse = GetDefaultProjectIndexByWorkspaceResponses[keyof GetDefaultProjectIndexByWorkspaceResponses];

export type CreateProjectWithConversationData = {
    body: {
        name: string;
        /**
         * ID of the organization to create the project in
         */
        organizationId: string;
        description?: string;
        /**
         * Optional folder ID to place the project in
         */
        folderId?: string;
    };
    headers?: {
        authorization?: string;
    };
    path?: never;
    query?: never;
    url: '/projects/';
};

export type CreateProjectWithConversationErrors = {
    /**
     * Validation error or invalid folder
     */
    400: {
        errors?: Array<{
            msg?: string;
            param?: string;
            location?: string;
        }>;
    } | {
        error?: string;
    };
    /**
     * Unauthorized - Invalid token
     */
    401: _Error;
    /**
     * No access to organization or folder
     */
    403: {
        error?: string;
    };
    /**
     * Server error - JWT_SECRET not configured
     */
    500: _Error;
};

export type CreateProjectWithConversationError = CreateProjectWithConversationErrors[keyof CreateProjectWithConversationErrors];

export type CreateProjectWithConversationResponses = {
    /**
     * Project created successfully
     */
    201: {
        id?: string;
        name?: string;
        description?: string | null;
        folder_id?: string | null;
        icon?: string;
        created_at?: string;
        updated_at?: string;
    };
};

export type CreateProjectWithConversationResponse = CreateProjectWithConversationResponses[keyof CreateProjectWithConversationResponses];

export type DeleteProjectAndAssociatedDataData = {
    body?: never;
    headers?: {
        authorization?: string;
    };
    path: {
        /**
         * ID of the project to delete
         */
        projectId: string;
    };
    query?: never;
    url: '/projects/{projectId}';
};

export type DeleteProjectAndAssociatedDataErrors = {
    /**
     * Unauthorized - Invalid token
     */
    401: _Error;
    /**
     * No access to project
     */
    403: {
        error?: string;
    };
    /**
     * Project not found
     */
    404: {
        error?: string;
    };
    /**
     * Server error - JWT_SECRET not configured
     */
    500: _Error;
};

export type DeleteProjectAndAssociatedDataError = DeleteProjectAndAssociatedDataErrors[keyof DeleteProjectAndAssociatedDataErrors];

export type DeleteProjectAndAssociatedDataResponses = {
    /**
     * Project deleted successfully
     */
    204: void;
};

export type DeleteProjectAndAssociatedDataResponse = DeleteProjectAndAssociatedDataResponses[keyof DeleteProjectAndAssociatedDataResponses];

export type GetProjectWithFolderInfoData = {
    body?: never;
    headers?: {
        authorization?: string;
    };
    path: {
        /**
         * ID of the project to retrieve
         */
        projectId: string;
    };
    query?: never;
    url: '/projects/{projectId}';
};

export type GetProjectWithFolderInfoErrors = {
    /**
     * Unauthorized - Invalid token
     */
    401: _Error;
    /**
     * No access to project
     */
    403: {
        error?: string;
    };
    /**
     * Project not found
     */
    404: {
        error?: string;
    };
    /**
     * Server error - JWT_SECRET not configured
     */
    500: _Error;
};

export type GetProjectWithFolderInfoError = GetProjectWithFolderInfoErrors[keyof GetProjectWithFolderInfoErrors];

export type GetProjectWithFolderInfoResponses = {
    /**
     * Project details retrieved successfully
     */
    200: {
        id?: string;
        name?: string;
        description?: string | null;
        organization_id?: string;
        folder_id?: string | null;
        icon?: string;
        created_at?: string;
        updated_at?: string;
        folder_name?: string | null;
        folder_path?: string | null;
        created_by_name?: string;
    };
};

export type GetProjectWithFolderInfoResponse = GetProjectWithFolderInfoResponses[keyof GetProjectWithFolderInfoResponses];

export type UpdateProjectAttributesData = {
    body: {
        name?: string;
        description?: string;
        icon?: string;
        /**
         * New folder ID or null to move to root
         */
        folder_id?: string | null;
        /**
         * Whether to use this project for training data
         */
        use_for_training?: boolean;
        /**
         * Whether this project has been used as training data
         */
        already_trained?: boolean;
        /**
         * Timestamp when the project was used for training
         */
        trained_at?: string;
    };
    headers?: {
        authorization?: string;
    };
    path: {
        /**
         * ID of the project to update
         */
        projectId: string;
    };
    query?: never;
    url: '/projects/{projectId}';
};

export type UpdateProjectAttributesErrors = {
    /**
     * Validation error or invalid folder
     */
    400: {
        errors?: Array<{
            msg?: string;
            param?: string;
            location?: string;
        }>;
    } | {
        error?: string;
    };
    /**
     * Unauthorized - Invalid token
     */
    401: _Error;
    /**
     * No access to project or folder
     */
    403: {
        error?: string;
    };
    /**
     * Project not found
     */
    404: {
        error?: string;
    };
    /**
     * Server error - JWT_SECRET not configured
     */
    500: _Error;
};

export type UpdateProjectAttributesError = UpdateProjectAttributesErrors[keyof UpdateProjectAttributesErrors];

export type UpdateProjectAttributesResponses = {
    /**
     * Project updated successfully
     */
    200: {
        id?: string;
        name?: string;
        description?: string | null;
        icon?: string;
        folder_id?: string | null;
        created_at?: string;
        updated_at?: string;
        folder_name?: string | null;
        folder_path?: string | null;
        /**
         * Whether this project is used for training data
         */
        use_for_training?: boolean;
    };
};

export type UpdateProjectAttributesResponse = UpdateProjectAttributesResponses[keyof UpdateProjectAttributesResponses];

export type ListProjectsInOrganizationData = {
    body?: never;
    headers?: {
        authorization?: string;
    };
    path: {
        /**
         * ID of the organization to list projects from
         */
        organizationId: string;
    };
    query?: never;
    url: '/projects/org/{organizationId}';
};

export type ListProjectsInOrganizationErrors = {
    /**
     * Unauthorized - Invalid token
     */
    401: _Error;
    /**
     * No access to organization
     */
    403: {
        error?: string;
    };
    /**
     * Server error - JWT_SECRET not configured
     */
    500: _Error;
};

export type ListProjectsInOrganizationError = ListProjectsInOrganizationErrors[keyof ListProjectsInOrganizationErrors];

export type ListProjectsInOrganizationResponses = {
    /**
     * Projects retrieved successfully
     */
    200: Array<{
        id?: string;
        name?: string;
        description?: string | null;
        icon?: string;
        folder_id?: string | null;
        created_at?: string;
        updated_at?: string;
        folder_name?: string | null;
        folder_path?: string | null;
    }>;
};

export type ListProjectsInOrganizationResponse = ListProjectsInOrganizationResponses[keyof ListProjectsInOrganizationResponses];

export type GetProjectScadData = {
    body?: never;
    headers?: {
        authorization?: string;
    };
    path: {
        /**
         * The ID of the project
         */
        projectId: string;
    };
    query?: never;
    url: '/projects/{projectId}/scad';
};

export type GetProjectScadErrors = {
    /**
     * Unauthorized - Invalid token
     */
    401: _Error;
    /**
     * Server error - JWT_SECRET not configured
     */
    500: _Error;
};

export type GetProjectScadError = GetProjectScadErrors[keyof GetProjectScadErrors];

export type GetProjectScadResponses = {
    /**
     * Latest SCAD object retrieved successfully
     */
    200: {
        /**
         * The SCAD object content. Empty string if no objects exist.
         */
        scad?: string;
    };
};

export type GetProjectScadResponse = GetProjectScadResponses[keyof GetProjectScadResponses];

export type UpdateProjectScadData = {
    body: {
        /**
         * The SCAD object content
         */
        scad: string;
    };
    headers?: {
        authorization?: string;
    };
    path: {
        /**
         * The ID of the project
         */
        projectId: string;
    };
    query?: never;
    url: '/projects/{projectId}/scad';
};

export type UpdateProjectScadErrors = {
    /**
     * Unauthorized - Invalid token
     */
    401: _Error;
    /**
     * Server error - JWT_SECRET not configured
     */
    500: _Error;
};

export type UpdateProjectScadError = UpdateProjectScadErrors[keyof UpdateProjectScadErrors];

export type UpdateProjectScadResponses = {
    /**
     * SCAD object updated successfully
     */
    200: {
        /**
         * The updated SCAD object content
         */
        scad?: string;
    };
};

export type UpdateProjectScadResponse = UpdateProjectScadResponses[keyof UpdateProjectScadResponses];

export type GetProjectCodeData = {
    body?: never;
    headers?: {
        authorization?: string;
    };
    path: {
        /**
         * The ID of the project
         */
        projectId: string;
    };
    query?: never;
    url: '/projects/{projectId}/code';
};

export type GetProjectCodeErrors = {
    /**
     * Unauthorized - Invalid token
     */
    401: _Error;
    /**
     * Server error - JWT_SECRET not configured
     */
    500: _Error;
};

export type GetProjectCodeError = GetProjectCodeErrors[keyof GetProjectCodeErrors];

export type GetProjectCodeResponses = {
    /**
     * Code objects retrieved successfully
     */
    200: {
        /**
         * An array of JavaScript objects
         */
        objects?: Array<{
            /**
             * Object ID
             */
            id?: string;
            /**
             * The JavaScript object content
             */
            object?: string;
            /**
             * Timestamp when the object was created
             */
            created_at?: string;
            /**
             * Timestamp when the object was last updated
             */
            updated_at?: string;
            /**
             * ID of the project this object belongs to
             */
            project_id?: string;
            /**
             * Filename of the object
             */
            filename?: string;
            /**
             * Filepath of the object
             */
            filepath?: string;
        }>;
    };
};

export type GetProjectCodeResponse = GetProjectCodeResponses[keyof GetProjectCodeResponses];

export type UpdateProjectCodeData = {
    body: {
        /**
         * The JavaScript code content
         */
        object: string;
        /**
         * Optional ID of an existing object to update
         */
        id?: string;
        /**
         * Optional filename for the code object
         */
        filename?: string;
        /**
         * Optional filepath for the code object
         */
        filepath?: string;
    };
    headers?: {
        authorization?: string;
    };
    path: {
        /**
         * The ID of the project
         */
        projectId: string;
    };
    query?: never;
    url: '/projects/{projectId}/code';
};

export type UpdateProjectCodeErrors = {
    /**
     * Unauthorized - Invalid token
     */
    401: _Error;
    /**
     * Server error - JWT_SECRET not configured
     */
    500: _Error;
};

export type UpdateProjectCodeError = UpdateProjectCodeErrors[keyof UpdateProjectCodeErrors];

export type UpdateProjectCodeResponses = {
    /**
     * Code object updated successfully
     */
    200: {
        object?: {
            /**
             * The object ID
             */
            id?: string;
            /**
             * The JavaScript code content
             */
            object?: string;
            /**
             * Creation timestamp
             */
            created_at?: string;
            /**
             * Last update timestamp
             */
            updated_at?: string;
            /**
             * The project ID
             */
            project_id?: string;
            /**
             * Filename of the object
             */
            filename?: string;
            /**
             * Filepath of the object
             */
            filepath?: string;
        };
    };
};

export type UpdateProjectCodeResponse = UpdateProjectCodeResponses[keyof UpdateProjectCodeResponses];

export type DeleteProjectCodeData = {
    body?: never;
    headers?: {
        authorization?: string;
    };
    path: {
        /**
         * ID of the code object to delete
         */
        objectId: string;
    };
    query?: never;
    url: '/projects/code/{objectId}';
};

export type DeleteProjectCodeErrors = {
    /**
     * User not authenticated
     */
    401: {
        error?: string;
    };
    /**
     * No access to project
     */
    403: {
        error?: string;
    };
    /**
     * Code object not found
     */
    404: {
        error?: string;
    };
    /**
     * Server error - JWT_SECRET not configured
     */
    500: _Error;
};

export type DeleteProjectCodeError = DeleteProjectCodeErrors[keyof DeleteProjectCodeErrors];

export type DeleteProjectCodeResponses = {
    /**
     * Code object deleted successfully
     */
    200: {
        message?: string;
    };
};

export type DeleteProjectCodeResponse = DeleteProjectCodeResponses[keyof DeleteProjectCodeResponses];

export type GetAdminUsersData = {
    body?: never;
    headers?: {
        authorization?: string;
    };
    path?: never;
    query?: never;
    url: '/admin/users/';
};

export type GetAdminUsersErrors = {
    /**
     * Unauthorized - Authentication required
     */
    401: _Error;
    /**
     * Forbidden - Admin access required
     */
    403: _Error;
    /**
     * Server error - JWT_SECRET not configured
     */
    500: _Error;
};

export type GetAdminUsersError = GetAdminUsersErrors[keyof GetAdminUsersErrors];

export type PutAdminUsersByUserIdRoleData = {
    body?: {
        isAdmin?: unknown;
    };
    headers?: {
        authorization?: string;
    };
    path: {
        userId: string;
    };
    query?: never;
    url: '/admin/users/{userId}/role';
};

export type PutAdminUsersByUserIdRoleErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized - Authentication required
     */
    401: _Error;
    /**
     * Forbidden - Admin access required
     */
    403: _Error;
    /**
     * Not Found
     */
    404: unknown;
    /**
     * Server error - JWT_SECRET not configured
     */
    500: _Error;
};

export type PutAdminUsersByUserIdRoleError = PutAdminUsersByUserIdRoleErrors[keyof PutAdminUsersByUserIdRoleErrors];

export type PutAdminUsersByUserIdRoleResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type DeleteAdminUsersByUserIdData = {
    body?: never;
    headers?: {
        authorization?: string;
    };
    path: {
        userId: string;
    };
    query?: never;
    url: '/admin/users/{userId}';
};

export type DeleteAdminUsersByUserIdErrors = {
    /**
     * Unauthorized - Authentication required
     */
    401: _Error;
    /**
     * Forbidden - Admin access required
     */
    403: _Error;
    /**
     * Server error - JWT_SECRET not configured
     */
    500: _Error;
};

export type DeleteAdminUsersByUserIdError = DeleteAdminUsersByUserIdErrors[keyof DeleteAdminUsersByUserIdErrors];

export type GenerateObjectsData = {
    body: {
        instructions: string;
        /**
         * Base64 encoded image of the object
         */
        base64Image?: string;
    };
    headers?: {
        authorization?: string;
    };
    path: {
        /**
         * ID of the project to generate objects for
         */
        projectId: string;
    };
    query?: never;
    url: '/chat/llm/{projectId}/generate-objects';
};

export type GenerateObjectsErrors = {
    /**
     * Invalid request parameters
     */
    400: {
        error?: string;
    };
    /**
     * Unauthorized - Missing or invalid token
     */
    401: {
        error?: string;
    };
    /**
     * Forbidden - No access to project
     */
    403: {
        error?: string;
    };
    /**
     * Project not found
     */
    404: {
        error?: string;
    };
    /**
     * Server error
     */
    500: {
        error?: string;
        /**
         * Additional error details if available
         */
        details?: string;
    };
};

export type GenerateObjectsError = GenerateObjectsErrors[keyof GenerateObjectsErrors];

export type GenerateObjectsResponses = {
    /**
     * Objects generated successfully
     */
    200: {
        /**
         * Chat messages generated during the process
         */
        messages?: Array<{
            role?: 'user' | 'assistant' | 'tool';
            content?: string;
            tool_calls?: Array<{
                [key: string]: unknown;
            }> | null;
            tool_outputs?: Array<{
                [key: string]: unknown;
            }> | null;
        }>;
        /**
         * JavaScript/ThreeJS content for the generated objects
         */
        jsContent?: string;
    };
};

export type GenerateObjectsResponse = GenerateObjectsResponses[keyof GenerateObjectsResponses];

export type GetChatHistoryData = {
    body?: never;
    headers?: {
        authorization?: string;
    };
    path: {
        /**
         * ID of the project to get history for
         */
        projectId: string;
    };
    query?: never;
    url: '/chat/history/{projectId}/history';
};

export type GetChatHistoryErrors = {
    /**
     * Unauthorized - Invalid token
     */
    401: _Error;
    /**
     * Server error - JWT_SECRET not configured
     */
    500: _Error;
};

export type GetChatHistoryError = GetChatHistoryErrors[keyof GetChatHistoryErrors];

export type GetChatHistoryResponses = {
    /**
     * Chat history retrieved successfully
     */
    200: Array<{
        id?: string;
        role?: 'user' | 'assistant' | 'tool';
        content?: string;
        tool_calls?: Array<{
            id?: string;
            type?: 'function';
            function?: {
                name?: string;
                arguments?: string;
            };
        }> | null;
        tool_call_id?: string | null;
        object_id?: string | null;
        created_at?: string;
        error?: string | null;
    }>;
};

export type GetChatHistoryResponse = GetChatHistoryResponses[keyof GetChatHistoryResponses];

export type CreateCheckoutSessionData = {
    body?: never;
    headers?: {
        authorization?: string;
    };
    path?: never;
    query?: never;
    url: '/billing/create-checkout-session/';
};

export type CreateCheckoutSessionErrors = {
    /**
     * Unauthorized - Invalid token
     */
    401: _Error;
    /**
     * Server error - JWT_SECRET not configured
     */
    500: _Error;
};

export type CreateCheckoutSessionError = CreateCheckoutSessionErrors[keyof CreateCheckoutSessionErrors];

export type CreatePortalSessionData = {
    body?: never;
    headers?: {
        authorization?: string;
    };
    path?: never;
    query?: never;
    url: '/billing/create-portal-session/';
};

export type CreatePortalSessionErrors = {
    /**
     * Unauthorized - Invalid token
     */
    401: _Error;
    /**
     * Server error - JWT_SECRET not configured
     */
    500: _Error;
};

export type CreatePortalSessionError = CreatePortalSessionErrors[keyof CreatePortalSessionErrors];