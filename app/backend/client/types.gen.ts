// This file is auto-generated by @hey-api/openapi-ts

export type _Error = {
    type?: string;
    properties?: {
        error?: {
            type?: string;
        };
    };
};

export type AuthenticatedRequest = {
    type?: string;
    properties?: {
        headers?: {
            type?: string;
            properties?: {
                Authorization?: {
                    type?: string;
                    description?: string;
                    example?: string;
                };
            };
        };
    };
};

export type PostBillingWebhookData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/billing/webhook';
};

export type PostBillingWebhookResponses = {
    default: unknown;
};

export type PingData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/ping/';
};

export type PingResponses = {
    /**
     * API is running
     */
    200: {
        message?: string;
    };
};

export type PingResponse = PingResponses[keyof PingResponses];

export type PingAuthData = {
    body?: never;
    headers?: {
        authorization?: string;
    };
    path?: never;
    query?: never;
    url: '/ping/auth';
};

export type PingAuthErrors = {
    /**
     * Unauthorized - Missing or invalid token
     */
    401: unknown;
    /**
     * Internal Server Error
     */
    500: unknown;
};

export type PingAuthResponses = {
    /**
     * Token is valid
     */
    200: {
        message?: string;
        user?: {
            userId?: string;
            email?: string;
            isAdmin?: boolean;
        };
    };
};

export type PingAuthResponse = PingAuthResponses[keyof PingAuthResponses];

export type PingAdminData = {
    body?: never;
    headers?: {
        authorization?: string;
    };
    path?: never;
    query?: never;
    url: '/ping/admin';
};

export type PingAdminErrors = {
    /**
     * Unauthorized - Missing or invalid token
     */
    401: unknown;
    /**
     * Forbidden - User is not an admin
     */
    403: unknown;
    /**
     * Internal Server Error
     */
    500: unknown;
};

export type PingAdminResponses = {
    /**
     * User has admin access
     */
    200: {
        message?: string;
        user?: {
            userId?: string;
            email?: string;
            isAdmin?: boolean;
        };
    };
};

export type PingAdminResponse = PingAdminResponses[keyof PingAdminResponses];

export type AuthenticateUserAndGetSessionData = {
    body: {
        email: string;
        password: string;
    };
    path?: never;
    query?: never;
    url: '/users/login';
};

export type AuthenticateUserAndGetSessionErrors = {
    /**
     * Invalid email format
     */
    400: {
        errors?: Array<{
            msg?: string;
            param?: string;
            location?: string;
        }>;
    };
    /**
     * Invalid credentials
     */
    401: {
        error?: string;
    };
    /**
     * Server error
     */
    500: {
        error?: string;
    };
};

export type AuthenticateUserAndGetSessionError = AuthenticateUserAndGetSessionErrors[keyof AuthenticateUserAndGetSessionErrors];

export type AuthenticateUserAndGetSessionResponses = {
    /**
     * Login successful
     */
    200: {
        /**
         * JWT token for authentication
         */
        token?: string;
        user?: {
            id?: string;
            email?: string;
            name?: string;
            organizations?: Array<{
                id?: string;
                name?: string;
                role?: 'owner' | 'admin' | 'member';
            }>;
        };
    };
};

export type AuthenticateUserAndGetSessionResponse = AuthenticateUserAndGetSessionResponses[keyof AuthenticateUserAndGetSessionResponses];

export type CreateUserAccountAndWorkspaceData = {
    body: {
        email: string;
        /**
         * Must be at least 8 characters long
         */
        password: string;
        /**
         * User's full name
         */
        name: string;
    };
    path?: never;
    query?: never;
    url: '/users/register';
};

export type CreateUserAccountAndWorkspaceErrors = {
    /**
     * Validation error - Invalid email, password too short, or missing name
     */
    400: {
        errors?: Array<{
            msg?: string;
            param?: string;
            location?: string;
        }>;
    };
    /**
     * Email already registered
     */
    409: {
        error?: string;
    };
    /**
     * Server error during registration
     */
    500: {
        error?: string;
    };
};

export type CreateUserAccountAndWorkspaceError = CreateUserAccountAndWorkspaceErrors[keyof CreateUserAccountAndWorkspaceErrors];

export type CreateUserAccountAndWorkspaceResponses = {
    /**
     * User registered successfully
     */
    201: {
        message?: string;
        /**
         * The ID of the newly created user
         */
        userId?: string;
    };
};

export type CreateUserAccountAndWorkspaceResponse = CreateUserAccountAndWorkspaceResponses[keyof CreateUserAccountAndWorkspaceResponses];

export type GetUserDetailsWithOrganizationsData = {
    body?: never;
    headers?: {
        authorization?: string;
    };
    path?: never;
    query?: never;
    url: '/users/me';
};

export type GetUserDetailsWithOrganizationsErrors = {
    /**
     * Unauthorized - Missing or invalid token
     */
    401: unknown;
    /**
     * User not found
     */
    404: {
        error?: string;
    };
    /**
     * Server error
     */
    500: {
        error?: string;
    };
};

export type GetUserDetailsWithOrganizationsError = GetUserDetailsWithOrganizationsErrors[keyof GetUserDetailsWithOrganizationsErrors];

export type GetUserDetailsWithOrganizationsResponses = {
    /**
     * User details retrieved successfully
     */
    200: {
        id?: string;
        email?: string;
        name?: string;
        created_at?: string;
        updated_at?: string;
        last_login_at?: string | null;
        organizations?: Array<{
            id?: string;
            name?: string;
            role?: 'owner' | 'admin' | 'member';
        }>;
    };
};

export type GetUserDetailsWithOrganizationsResponse = GetUserDetailsWithOrganizationsResponses[keyof GetUserDetailsWithOrganizationsResponses];

export type ListFolderContentsAndProjectsData = {
    body?: never;
    headers?: {
        authorization?: string;
    };
    path: {
        /**
         * ID of the folder to get contents from
         */
        folderId: string;
    };
    query?: never;
    url: '/folders/{folderId}/contents';
};

export type ListFolderContentsAndProjectsErrors = {
    /**
     * Unauthorized - Missing or invalid token
     */
    401: unknown;
    /**
     * No access to organization
     */
    403: {
        error?: string;
    };
    /**
     * Folder not found
     */
    404: {
        error?: string;
    };
    /**
     * Server error
     */
    500: {
        error?: string;
    };
};

export type ListFolderContentsAndProjectsError = ListFolderContentsAndProjectsErrors[keyof ListFolderContentsAndProjectsErrors];

export type ListFolderContentsAndProjectsResponses = {
    /**
     * Folder contents retrieved successfully
     */
    200: {
        projects?: Array<{
            id?: string;
            name?: string;
            description?: string | null;
            icon?: string | null;
            folder_id?: string;
            created_at?: string;
            updated_at?: string;
        }>;
        subfolders?: Array<{
            id?: string;
            name?: string;
            path?: string;
            parent_folder_id?: string | null;
            created_at?: string;
            updated_at?: string;
        }>;
    };
};

export type ListFolderContentsAndProjectsResponse = ListFolderContentsAndProjectsResponses[keyof ListFolderContentsAndProjectsResponses];

export type ListAllFoldersInOrganizationData = {
    body?: never;
    headers?: {
        authorization?: string;
    };
    path: {
        /**
         * ID of the organization to list folders from
         */
        organizationId: string;
    };
    query?: never;
    url: '/folders/org/{organizationId}';
};

export type ListAllFoldersInOrganizationErrors = {
    /**
     * Unauthorized - Missing or invalid token
     */
    401: unknown;
    /**
     * No access to organization
     */
    403: {
        error?: string;
    };
    /**
     * Server error
     */
    500: {
        error?: string;
    };
};

export type ListAllFoldersInOrganizationError = ListAllFoldersInOrganizationErrors[keyof ListAllFoldersInOrganizationErrors];

export type ListAllFoldersInOrganizationResponses = {
    /**
     * Folders retrieved successfully
     */
    200: Array<{
        id?: string;
        name?: string;
        /**
         * Full path of the folder including parent folders
         */
        path?: string;
        parent_folder_id?: string | null;
        created_at?: string;
        updated_at?: string;
    }>;
};

export type ListAllFoldersInOrganizationResponse = ListAllFoldersInOrganizationResponses[keyof ListAllFoldersInOrganizationResponses];

export type ListAllProjectsInOrganizationData = {
    body?: never;
    headers?: {
        authorization?: string;
    };
    path: {
        /**
         * ID of the organization to list projects from
         */
        organizationId: string;
    };
    query?: never;
    url: '/folders/projects/org/{organizationId}';
};

export type ListAllProjectsInOrganizationErrors = {
    /**
     * Unauthorized - Missing or invalid token
     */
    401: unknown;
    /**
     * No access to organization
     */
    403: {
        error?: string;
    };
    /**
     * Server error
     */
    500: {
        error?: string;
    };
};

export type ListAllProjectsInOrganizationError = ListAllProjectsInOrganizationErrors[keyof ListAllProjectsInOrganizationErrors];

export type ListAllProjectsInOrganizationResponses = {
    /**
     * Projects retrieved successfully
     */
    200: Array<{
        id?: string;
        name?: string;
        description?: string | null;
        icon?: string | null;
        folder_id?: string | null;
        created_at?: string;
        updated_at?: string;
        /**
         * Name of the folder containing the project
         */
        folder_name?: string | null;
        /**
         * Full path of the folder containing the project
         */
        folder_path?: string | null;
    }>;
};

export type ListAllProjectsInOrganizationResponse = ListAllProjectsInOrganizationResponses[keyof ListAllProjectsInOrganizationResponses];

export type GetFolderHierarchyPathData = {
    body?: never;
    headers?: {
        authorization?: string;
    };
    path: {
        /**
         * ID of the folder to get hierarchy for
         */
        folderId: string;
    };
    query: {
        /**
         * ID of the organization the folder belongs to
         */
        organizationId: string;
    };
    url: '/folders/{folderId}/hierarchy';
};

export type GetFolderHierarchyPathErrors = {
    /**
     * Unauthorized - Missing or invalid token
     */
    401: unknown;
    /**
     * No access to organization
     */
    403: {
        error?: string;
    };
    /**
     * Folder not found
     */
    404: {
        error?: string;
    };
    /**
     * Server error
     */
    500: {
        error?: string;
    };
};

export type GetFolderHierarchyPathError = GetFolderHierarchyPathErrors[keyof GetFolderHierarchyPathErrors];

export type GetFolderHierarchyPathResponses = {
    /**
     * Array of folders from root to target folder
     */
    200: Array<{
        id?: string;
        name?: string;
        parent_folder_id?: string | null;
    }>;
};

export type GetFolderHierarchyPathResponse = GetFolderHierarchyPathResponses[keyof GetFolderHierarchyPathResponses];

export type CreateFolderWithHierarchyData = {
    body: {
        name: string;
        /**
         * ID of the organization to create the folder in
         */
        organizationId: string;
        /**
         * Optional parent folder ID for nesting (max depth: 4)
         */
        parentFolderId?: string | null;
    };
    headers?: {
        authorization?: string;
    };
    path?: never;
    query?: never;
    url: '/folders/';
};

export type CreateFolderWithHierarchyErrors = {
    /**
     * Validation error or maximum nesting depth exceeded
     */
    400: {
        errors?: Array<{
            msg?: string;
            param?: string;
            location?: string;
        }>;
    } | {
        error?: string;
    };
    /**
     * Unauthorized - Missing or invalid token
     */
    401: unknown;
    /**
     * No access to organization
     */
    403: {
        error?: string;
    };
    /**
     * Parent folder not found
     */
    404: {
        error?: string;
    };
    /**
     * Server error
     */
    500: {
        error?: string;
    };
};

export type CreateFolderWithHierarchyError = CreateFolderWithHierarchyErrors[keyof CreateFolderWithHierarchyErrors];

export type CreateFolderWithHierarchyResponses = {
    /**
     * Folder created successfully
     */
    201: {
        id?: string;
        name?: string;
        /**
         * Full path of the folder including parent folders
         */
        path?: string;
        parent_folder_id?: string | null;
        created_at?: string;
        updated_at?: string;
    };
};

export type CreateFolderWithHierarchyResponse = CreateFolderWithHierarchyResponses[keyof CreateFolderWithHierarchyResponses];

export type DeleteFolderByOwnerOrAdminData = {
    body?: never;
    headers?: {
        authorization?: string;
    };
    path: {
        /**
         * ID of the folder to delete
         */
        folderId: string;
    };
    query?: never;
    url: '/folders/{folderId}';
};

export type DeleteFolderByOwnerOrAdminErrors = {
    /**
     * Unauthorized - Missing or invalid token
     */
    401: unknown;
    /**
     * Forbidden - No access or insufficient role
     */
    403: {
        error?: string;
    } | {
        error?: string;
    };
    /**
     * Folder not found
     */
    404: {
        error?: string;
    };
    /**
     * Server error
     */
    500: {
        error?: string;
    };
};

export type DeleteFolderByOwnerOrAdminError = DeleteFolderByOwnerOrAdminErrors[keyof DeleteFolderByOwnerOrAdminErrors];

export type DeleteFolderByOwnerOrAdminResponses = {
    /**
     * Folder deleted successfully
     */
    200: {
        message?: string;
    };
};

export type DeleteFolderByOwnerOrAdminResponse = DeleteFolderByOwnerOrAdminResponses[keyof DeleteFolderByOwnerOrAdminResponses];

export type CreateProjectWithConversationData = {
    body: {
        name: string;
        /**
         * ID of the organization to create the project in
         */
        organizationId: string;
        description?: string;
        /**
         * Optional folder ID to place the project in
         */
        folderId?: string;
    };
    headers?: {
        authorization?: string;
    };
    path?: never;
    query?: never;
    url: '/projects/';
};

export type CreateProjectWithConversationErrors = {
    /**
     * Validation error or invalid folder
     */
    400: {
        errors?: Array<{
            msg?: string;
            param?: string;
            location?: string;
        }>;
    } | {
        error?: string;
    };
    /**
     * Unauthorized - Missing or invalid token
     */
    401: unknown;
    /**
     * No access to organization or folder
     */
    403: {
        error?: string;
    };
    /**
     * Server error
     */
    500: {
        error?: string;
    };
};

export type CreateProjectWithConversationError = CreateProjectWithConversationErrors[keyof CreateProjectWithConversationErrors];

export type CreateProjectWithConversationResponses = {
    /**
     * Project created successfully
     */
    201: {
        id?: string;
        name?: string;
        description?: string | null;
        folder_id?: string | null;
        icon?: string;
        created_at?: string;
        updated_at?: string;
    };
};

export type CreateProjectWithConversationResponse = CreateProjectWithConversationResponses[keyof CreateProjectWithConversationResponses];

export type DeleteProjectAndAssociatedDataData = {
    body?: never;
    headers?: {
        authorization?: string;
    };
    path: {
        /**
         * ID of the project to delete
         */
        projectId: string;
    };
    query?: never;
    url: '/projects/{projectId}';
};

export type DeleteProjectAndAssociatedDataErrors = {
    /**
     * Unauthorized - Missing or invalid token
     */
    401: unknown;
    /**
     * No access to project
     */
    403: {
        error?: string;
    };
    /**
     * Project not found
     */
    404: {
        error?: string;
    };
    /**
     * Server error
     */
    500: {
        error?: string;
    };
};

export type DeleteProjectAndAssociatedDataError = DeleteProjectAndAssociatedDataErrors[keyof DeleteProjectAndAssociatedDataErrors];

export type DeleteProjectAndAssociatedDataResponses = {
    /**
     * Project deleted successfully
     */
    204: void;
};

export type DeleteProjectAndAssociatedDataResponse = DeleteProjectAndAssociatedDataResponses[keyof DeleteProjectAndAssociatedDataResponses];

export type GetProjectWithFolderInfoData = {
    body?: never;
    headers?: {
        authorization?: string;
    };
    path: {
        /**
         * ID of the project to retrieve
         */
        projectId: string;
    };
    query?: never;
    url: '/projects/{projectId}';
};

export type GetProjectWithFolderInfoErrors = {
    /**
     * Unauthorized - Missing or invalid token
     */
    401: unknown;
    /**
     * No access to project
     */
    403: {
        error?: string;
    };
    /**
     * Project not found
     */
    404: {
        error?: string;
    };
    /**
     * Server error
     */
    500: {
        error?: string;
    };
};

export type GetProjectWithFolderInfoError = GetProjectWithFolderInfoErrors[keyof GetProjectWithFolderInfoErrors];

export type GetProjectWithFolderInfoResponses = {
    /**
     * Project details retrieved successfully
     */
    200: {
        id?: string;
        name?: string;
        description?: string | null;
        organization_id?: string;
        folder_id?: string | null;
        icon?: string;
        created_at?: string;
        updated_at?: string;
        folder_name?: string | null;
        folder_path?: string | null;
        created_by_name?: string;
    };
};

export type GetProjectWithFolderInfoResponse = GetProjectWithFolderInfoResponses[keyof GetProjectWithFolderInfoResponses];

export type UpdateProjectAttributesData = {
    body: {
        name?: string;
        description?: string;
        icon?: string;
        /**
         * New folder ID or null to move to root
         */
        folder_id?: string | null;
    };
    headers?: {
        authorization?: string;
    };
    path: {
        /**
         * ID of the project to update
         */
        projectId: string;
    };
    query?: never;
    url: '/projects/{projectId}';
};

export type UpdateProjectAttributesErrors = {
    /**
     * Validation error or invalid folder
     */
    400: {
        errors?: Array<{
            msg?: string;
            param?: string;
            location?: string;
        }>;
    } | {
        error?: string;
    };
    /**
     * Unauthorized - Missing or invalid token
     */
    401: unknown;
    /**
     * No access to project or folder
     */
    403: {
        error?: string;
    };
    /**
     * Project not found
     */
    404: {
        error?: string;
    };
    /**
     * Server error
     */
    500: {
        error?: string;
    };
};

export type UpdateProjectAttributesError = UpdateProjectAttributesErrors[keyof UpdateProjectAttributesErrors];

export type UpdateProjectAttributesResponses = {
    /**
     * Project updated successfully
     */
    200: {
        id?: string;
        name?: string;
        description?: string | null;
        icon?: string;
        folder_id?: string | null;
        created_at?: string;
        updated_at?: string;
        folder_name?: string | null;
        folder_path?: string | null;
    };
};

export type UpdateProjectAttributesResponse = UpdateProjectAttributesResponses[keyof UpdateProjectAttributesResponses];

export type ListProjectsInOrganizationData = {
    body?: never;
    headers?: {
        authorization?: string;
    };
    path: {
        /**
         * ID of the organization to list projects from
         */
        organizationId: string;
    };
    query?: never;
    url: '/projects/org/{organizationId}';
};

export type ListProjectsInOrganizationErrors = {
    /**
     * Unauthorized - Missing or invalid token
     */
    401: unknown;
    /**
     * No access to organization
     */
    403: {
        error?: string;
    };
    /**
     * Server error
     */
    500: {
        error?: string;
    };
};

export type ListProjectsInOrganizationError = ListProjectsInOrganizationErrors[keyof ListProjectsInOrganizationErrors];

export type ListProjectsInOrganizationResponses = {
    /**
     * Projects retrieved successfully
     */
    200: Array<{
        id?: string;
        name?: string;
        description?: string | null;
        icon?: string;
        folder_id?: string | null;
        created_at?: string;
        updated_at?: string;
        folder_name?: string | null;
        folder_path?: string | null;
    }>;
};

export type ListProjectsInOrganizationResponse = ListProjectsInOrganizationResponses[keyof ListProjectsInOrganizationResponses];

export type GetProjectScadData = {
    body?: never;
    headers?: {
        authorization?: string;
    };
    path: {
        /**
         * The ID of the project
         */
        projectId: string;
    };
    query?: never;
    url: '/projects/{projectId}/scad';
};

export type GetProjectScadErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Internal Server Error
     */
    500: unknown;
};

export type GetProjectScadResponses = {
    /**
     * Latest SCAD object retrieved successfully
     */
    200: {
        /**
         * The SCAD object content. Empty string if no objects exist.
         */
        scad?: string;
    };
};

export type GetProjectScadResponse = GetProjectScadResponses[keyof GetProjectScadResponses];

export type GetProjectStlData = {
    body?: never;
    headers?: {
        authorization?: string;
    };
    path: {
        /**
         * The ID of the project
         */
        projectId: string;
    };
    query?: never;
    url: '/projects/{projectId}/stl';
};

export type GetProjectStlErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Internal Server Error
     */
    500: unknown;
};

export type GetProjectStlResponses = {
    /**
     * Latest STL retrieved successfully
     */
    200: {
        /**
         * The STL content. Empty string if no objects exist.
         */
        stl?: string;
    };
};

export type GetProjectStlResponse = GetProjectStlResponses[keyof GetProjectStlResponses];

export type GetAdminUsersData = {
    body?: never;
    headers?: {
        authorization?: string;
    };
    path?: never;
    query?: never;
    url: '/admin/users/';
};

export type GetAdminUsersErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Internal Server Error
     */
    500: unknown;
};

export type PutAdminUsersByUserIdRoleData = {
    body?: {
        isAdmin?: unknown;
    };
    headers?: {
        authorization?: string;
    };
    path: {
        userId: string;
    };
    query?: never;
    url: '/admin/users/{userId}/role';
};

export type PutAdminUsersByUserIdRoleErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not Found
     */
    404: unknown;
    /**
     * Internal Server Error
     */
    500: unknown;
};

export type PutAdminUsersByUserIdRoleResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type DeleteAdminUsersByUserIdData = {
    body?: never;
    headers?: {
        authorization?: string;
    };
    path: {
        userId: string;
    };
    query?: never;
    url: '/admin/users/{userId}';
};

export type DeleteAdminUsersByUserIdErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Internal Server Error
     */
    500: unknown;
};

export type GenerateObjectsData = {
    body: {
        /**
         * Natural language instructions for generating 3D objects
         */
        instructions: string;
        /**
         * Current rotation of the scene in radians
         */
        sceneRotation?: {
            x?: number;
            y?: number;
            z?: number;
        };
        /**
         * Optional manual JSON input to override generation
         */
        manualJson?: {
            [key: string]: unknown;
        } | null;
    };
    headers?: {
        authorization?: string;
    };
    path: {
        /**
         * ID of the project to generate objects for
         */
        projectId: string;
    };
    query?: never;
    url: '/chat/llm/{projectId}/generate-objects';
};

export type GenerateObjectsErrors = {
    /**
     * Invalid request parameters
     */
    400: {
        error?: string;
    };
    /**
     * Unauthorized - Missing or invalid token
     */
    401: {
        error?: string;
    };
    /**
     * Forbidden - No access to project
     */
    403: {
        error?: string;
    };
    /**
     * Project not found
     */
    404: {
        error?: string;
    };
    /**
     * Server error
     */
    500: {
        error?: string;
        /**
         * Additional error details if available
         */
        details?: string;
    };
};

export type GenerateObjectsError = GenerateObjectsErrors[keyof GenerateObjectsErrors];

export type GenerateObjectsResponses = {
    /**
     * Objects generated successfully
     */
    200: {
        /**
         * Generated scene description
         */
        json?: {
            objects?: Array<{
                type?: 'cube' | 'sphere' | 'cylinder' | 'polyhedron';
                params?: {
                    [key: string]: unknown;
                };
                position?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
            }>;
            scene?: {
                rotation?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
            };
        };
        /**
         * Step-by-step reasoning for the generation
         */
        reasoning?: string;
        /**
         * ID of the generated message in conversation
         */
        messageId?: string;
        toolCalls?: Array<{
            [key: string]: unknown;
        }>;
        errors?: Array<string>;
        /**
         * STL file for the generated objects
         */
        stl?: string;
        /**
         * SCAD file for the generated objects
         */
        scad?: string;
    };
};

export type GenerateObjectsResponse = GenerateObjectsResponses[keyof GenerateObjectsResponses];

export type GetChatHistoryData = {
    body?: never;
    path: {
        /**
         * ID of the project to get history for
         */
        projectId: string;
    };
    query?: never;
    url: '/chat/history/{projectId}/history';
};

export type GetChatHistoryErrors = {
    /**
     * Internal Server Error
     */
    500: unknown;
};

export type GetChatHistoryResponses = {
    /**
     * Chat history retrieved successfully
     */
    200: Array<{
        id?: string;
        role?: 'user' | 'assistant' | 'tool';
        content?: string;
        tool_calls?: Array<{
            id?: string;
            type?: 'function';
            function?: {
                name?: string;
                arguments?: string;
            };
        }> | null;
        tool_call_id?: string | null;
        object_id?: string | null;
        created_at?: string;
        error?: string | null;
    }>;
};

export type GetChatHistoryResponse = GetChatHistoryResponses[keyof GetChatHistoryResponses];

export type CreateCheckoutSessionData = {
    body?: never;
    headers?: {
        authorization?: string;
    };
    path?: never;
    query?: never;
    url: '/billing/create-checkout-session/';
};

export type CreateCheckoutSessionErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Internal Server Error
     */
    500: unknown;
};

export type CreatePortalSessionData = {
    body?: never;
    headers?: {
        authorization?: string;
    };
    path?: never;
    query?: never;
    url: '/billing/create-portal-session/';
};

export type CreatePortalSessionErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Internal Server Error
     */
    500: unknown;
};