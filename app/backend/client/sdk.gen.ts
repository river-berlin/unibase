// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-fetch';
import type { PingData, PingResponse, PingAuthData, PingAuthResponse, PingAdminData, PingAdminResponse, AuthenticateUserAndGetSessionData, AuthenticateUserAndGetSessionResponse, AuthenticateUserAndGetSessionError, CreateUserAccountAndWorkspaceData, CreateUserAccountAndWorkspaceResponse, CreateUserAccountAndWorkspaceError, ListFolderContentsAndProjectsData, ListFolderContentsAndProjectsResponse, ListFolderContentsAndProjectsError, ListAllFoldersInOrganizationData, ListAllFoldersInOrganizationResponse, ListAllFoldersInOrganizationError, ListAllProjectsInOrganizationData, ListAllProjectsInOrganizationResponse, ListAllProjectsInOrganizationError, GetFolderHierarchyPathData, GetFolderHierarchyPathResponse, GetFolderHierarchyPathError, CreateFolderWithHierarchyData, CreateFolderWithHierarchyResponse, CreateFolderWithHierarchyError, DeleteFolderByOwnerOrAdminData, DeleteFolderByOwnerOrAdminResponse, DeleteFolderByOwnerOrAdminError, CreateProjectWithConversationData, CreateProjectWithConversationResponse, CreateProjectWithConversationError, DeleteProjectAndAssociatedDataData, DeleteProjectAndAssociatedDataResponse, DeleteProjectAndAssociatedDataError, GetProjectWithFolderInfoData, GetProjectWithFolderInfoResponse, GetProjectWithFolderInfoError, UpdateProjectAttributesData, UpdateProjectAttributesResponse, UpdateProjectAttributesError, ListProjectsInOrganizationData, ListProjectsInOrganizationResponse, ListProjectsInOrganizationError, GetProjectsByProjectIdScadData, GetAdminUsersData, PutAdminUsersByUserIdRoleData, DeleteAdminUsersByUserIdData } from './types.gen';
import { client as _heyApiClient } from './client.gen';

/**
 * Basic health check
 * Returns a simple pong response to verify the API is running
 */
export const ping = <ThrowOnError extends boolean = false>(options?: Options<PingData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PingResponse, unknown, ThrowOnError>({
        url: '/ping/',
        ...options
    });
};

/**
 * Authentication check
 * Verifies that the authentication token is valid and returns user information
 */
export const pingAuth = <ThrowOnError extends boolean = false>(options?: Options<PingAuthData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PingAuthResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/ping/auth',
        ...options
    });
};

/**
 * Admin access check
 * Verifies that the user has admin privileges
 */
export const pingAdmin = <ThrowOnError extends boolean = false>(options?: Options<PingAdminData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PingAdminResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/ping/admin',
        ...options
    });
};

/**
 * User login
 * Authenticates user credentials, updates last login time, and returns JWT token with user information including organizations
 */
export const authenticateUserAndGetSession = <ThrowOnError extends boolean = false>(options: Options<AuthenticateUserAndGetSessionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AuthenticateUserAndGetSessionResponse, AuthenticateUserAndGetSessionError, ThrowOnError>({
        url: '/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Register new user
 * Creates a new user account with secure password hashing and initializes their default organization workspace
 */
export const createUserAccountAndWorkspace = <ThrowOnError extends boolean = false>(options: Options<CreateUserAccountAndWorkspaceData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateUserAccountAndWorkspaceResponse, CreateUserAccountAndWorkspaceError, ThrowOnError>({
        url: '/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get folder contents
 * Retrieves all subfolders and projects within a specified folder
 */
export const listFolderContentsAndProjects = <ThrowOnError extends boolean = false>(options: Options<ListFolderContentsAndProjectsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListFolderContentsAndProjectsResponse, ListFolderContentsAndProjectsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/folders/{folderId}/contents',
        ...options
    });
};

/**
 * Get all folders in organization
 * Retrieves all folders in an organization, ordered by folder path
 */
export const listAllFoldersInOrganization = <ThrowOnError extends boolean = false>(options: Options<ListAllFoldersInOrganizationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListAllFoldersInOrganizationResponse, ListAllFoldersInOrganizationError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/folders/org/{organizationId}',
        ...options
    });
};

/**
 * Get all projects in organization
 * Retrieves all projects in an organization, ordered by folder path and project name
 */
export const listAllProjectsInOrganization = <ThrowOnError extends boolean = false>(options: Options<ListAllProjectsInOrganizationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListAllProjectsInOrganizationResponse, ListAllProjectsInOrganizationError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/folders/projects/org/{organizationId}',
        ...options
    });
};

/**
 * Get folder hierarchy
 * Retrieves the complete folder hierarchy path from root to the specified folder
 */
export const getFolderHierarchyPath = <ThrowOnError extends boolean = false>(options: Options<GetFolderHierarchyPathData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetFolderHierarchyPathResponse, GetFolderHierarchyPathError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/folders/{folderId}/hierarchy',
        ...options
    });
};

/**
 * Create new folder
 * Creates a new folder in an organization with optional parent folder, maintaining folder hierarchy and path
 */
export const createFolderWithHierarchy = <ThrowOnError extends boolean = false>(options: Options<CreateFolderWithHierarchyData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateFolderWithHierarchyResponse, CreateFolderWithHierarchyError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/folders/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete folder
 * Deletes a folder if the authenticated user has owner or admin role in the organization
 */
export const deleteFolderByOwnerOrAdmin = <ThrowOnError extends boolean = false>(options: Options<DeleteFolderByOwnerOrAdminData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteFolderByOwnerOrAdminResponse, DeleteFolderByOwnerOrAdminError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/folders/{folderId}',
        ...options
    });
};

/**
 * Create new project
 * Creates a new project in an organization with an optional folder, and initializes a default conversation.
 */
export const createProjectWithConversation = <ThrowOnError extends boolean = false>(options: Options<CreateProjectWithConversationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateProjectWithConversationResponse, CreateProjectWithConversationError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/projects/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete project
 * Deletes a project and all its associated data (conversations, messages) in a transaction
 */
export const deleteProjectAndAssociatedData = <ThrowOnError extends boolean = false>(options: Options<DeleteProjectAndAssociatedDataData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteProjectAndAssociatedDataResponse, DeleteProjectAndAssociatedDataError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/projects/{projectId}',
        ...options
    });
};

/**
 * Get project details
 * Retrieves detailed project information including folder path and creator details
 */
export const getProjectWithFolderInfo = <ThrowOnError extends boolean = false>(options: Options<GetProjectWithFolderInfoData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetProjectWithFolderInfoResponse, GetProjectWithFolderInfoError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/projects/{projectId}',
        ...options
    });
};

/**
 * Update project details
 * Updates project information including name, description, icon, and folder location
 */
export const updateProjectAttributes = <ThrowOnError extends boolean = false>(options: Options<UpdateProjectAttributesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<UpdateProjectAttributesResponse, UpdateProjectAttributesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/projects/{projectId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List organization projects
 * Retrieves all projects in an organization with their folder information, ordered by folder path and name
 */
export const listProjectsInOrganization = <ThrowOnError extends boolean = false>(options: Options<ListProjectsInOrganizationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListProjectsInOrganizationResponse, ListProjectsInOrganizationError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/projects/org/{organizationId}',
        ...options
    });
};

export const getProjectsByProjectIdScad = <ThrowOnError extends boolean = false>(options: Options<GetProjectsByProjectIdScadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/projects/{projectId}/scad',
        ...options
    });
};

export const getAdminUsers = <ThrowOnError extends boolean = false>(options?: Options<GetAdminUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/admin/users/',
        ...options
    });
};

export const putAdminUsersByUserIdRole = <ThrowOnError extends boolean = false>(options: Options<PutAdminUsersByUserIdRoleData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        url: '/admin/users/{userId}/role',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteAdminUsersByUserId = <ThrowOnError extends boolean = false>(options: Options<DeleteAdminUsersByUserIdData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        url: '/admin/users/{userId}',
        ...options
    });
};