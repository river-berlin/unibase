// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-fetch';
import type { GetPingData, GetPingAuthData, GetPingAdminData, PostAuthLoginData, PostAuthRegisterData, GetFoldersByFolderIdContentsData, GetFoldersOrgByOrganizationIdData, GetFoldersProjectsOrgByOrganizationIdData, GetFoldersByFolderIdHierarchyData, PostFoldersData, DeleteFoldersByFolderIdData, PostProjectsData, DeleteProjectsByProjectIdData, GetProjectsByProjectIdData, PutProjectsByProjectIdData, GetProjectsOrgByOrganizationIdData, GetAdminUsersData, PutAdminUsersByUserIdRoleData, DeleteAdminUsersByUserIdData } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export const getPing = <ThrowOnError extends boolean = false>(options?: Options<GetPingData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/ping/',
        ...options
    });
};

export const getPingAuth = <ThrowOnError extends boolean = false>(options?: Options<GetPingAuthData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/ping/auth',
        ...options
    });
};

export const getPingAdmin = <ThrowOnError extends boolean = false>(options?: Options<GetPingAdminData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/ping/admin',
        ...options
    });
};

export const postAuthLogin = <ThrowOnError extends boolean = false>(options?: Options<PostAuthLoginData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/auth/login',
        ...options
    });
};

export const postAuthRegister = <ThrowOnError extends boolean = false>(options?: Options<PostAuthRegisterData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/auth/register',
        ...options
    });
};

export const getFoldersByFolderIdContents = <ThrowOnError extends boolean = false>(options: Options<GetFoldersByFolderIdContentsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/folders/{folderId}/contents',
        ...options
    });
};

export const getFoldersOrgByOrganizationId = <ThrowOnError extends boolean = false>(options: Options<GetFoldersOrgByOrganizationIdData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/folders/org/{organizationId}',
        ...options
    });
};

export const getFoldersProjectsOrgByOrganizationId = <ThrowOnError extends boolean = false>(options: Options<GetFoldersProjectsOrgByOrganizationIdData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/folders/projects/org/{organizationId}',
        ...options
    });
};

export const getFoldersByFolderIdHierarchy = <ThrowOnError extends boolean = false>(options: Options<GetFoldersByFolderIdHierarchyData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/folders/{folderId}/hierarchy',
        ...options
    });
};

export const postFolders = <ThrowOnError extends boolean = false>(options?: Options<PostFoldersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/folders/',
        ...options
    });
};

export const deleteFoldersByFolderId = <ThrowOnError extends boolean = false>(options: Options<DeleteFoldersByFolderIdData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        url: '/folders/{folderId}',
        ...options
    });
};

export const postProjects = <ThrowOnError extends boolean = false>(options?: Options<PostProjectsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/projects/',
        ...options
    });
};

export const deleteProjectsByProjectId = <ThrowOnError extends boolean = false>(options: Options<DeleteProjectsByProjectIdData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        url: '/projects/{projectId}',
        ...options
    });
};

export const getProjectsByProjectId = <ThrowOnError extends boolean = false>(options: Options<GetProjectsByProjectIdData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/projects/{projectId}',
        ...options
    });
};

export const putProjectsByProjectId = <ThrowOnError extends boolean = false>(options: Options<PutProjectsByProjectIdData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        url: '/projects/{projectId}',
        ...options
    });
};

export const getProjectsOrgByOrganizationId = <ThrowOnError extends boolean = false>(options: Options<GetProjectsOrgByOrganizationIdData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/projects/org/{organizationId}',
        ...options
    });
};

export const getAdminUsers = <ThrowOnError extends boolean = false>(options?: Options<GetAdminUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/admin/users/',
        ...options
    });
};

export const putAdminUsersByUserIdRole = <ThrowOnError extends boolean = false>(options: Options<PutAdminUsersByUserIdRoleData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        url: '/admin/users/{userId}/role',
        ...options
    });
};

export const deleteAdminUsersByUserId = <ThrowOnError extends boolean = false>(options: Options<DeleteAdminUsersByUserIdData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        url: '/admin/users/{userId}',
        ...options
    });
};